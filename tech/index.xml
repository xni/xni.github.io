<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Teches on Kostya&#39;s Blog</title>
    <link>https://xni.github.io/tech/</link>
    <description>Recent content in Teches on Kostya&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 18 Apr 2020 14:30:00 +0100</lastBuildDate>
    
	<atom:link href="https://xni.github.io/tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GDB basics</title>
      <link>https://xni.github.io/tech/gdb-basics/</link>
      <pubDate>Sat, 18 Apr 2020 14:30:00 +0100</pubDate>
      
      <guid>https://xni.github.io/tech/gdb-basics/</guid>
      <description>I need to confess: I have&amp;rsquo;t use GDB any how seriously before. May be just some basics like start an app, wait for it to crash, and then do bt to figure out that this was equal to 0. So this article is going to be a very entry level, gentle intro in GDB for C++.
In my current company we are using GDB a lot. The easiest way to debug things is now a debugger!</description>
    </item>
    
    <item>
      <title>Reading through HEX</title>
      <link>https://xni.github.io/tech/hex-reading-interesting-facts/</link>
      <pubDate>Thu, 09 Apr 2020 21:14:00 +0100</pubDate>
      
      <guid>https://xni.github.io/tech/hex-reading-interesting-facts/</guid>
      <description>Right now I am improving our exchange connectivity libraries. And one of the regular activities is anaylzing tcpdumps to validate what was sent over the wire.
Doing this for nearly for the whole week I found couple of tricks.
Jumping to the end of frame Let&amp;rsquo;s say you have some frame-oriented protocol, like websocket or EUREX ETI. Usually, message in those protocols start from the message_size field, then the message body follows, then the next message and so on.</description>
    </item>
    
  </channel>
</rss>